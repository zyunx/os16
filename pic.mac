%ifndef __PIC_MAC
%define __PIC_MAC

%define	master_pic_cmd	0x20
%define master_pic_data	0x21
%define slave_pic_cmd	0xa0
%define slave_pic_data	0xa1

%define pic_eoi		0x20

; PIC send 'End of Interrupt', the irq number in AH
; Use reg:  AX
%macro pic_send_eoi 0
	mov al, pic_eoi
	cmp	ah, 8
	jb %%master_pic
	out slave_pic_cmd, al
%%master_pic
	out master_pic_cmd, al
%endmacro

%define pic_icw1_icw4			0x01	; ICW4 (not) needed
%define pic_icw1_single			0x02	; Single (cascade) mode
%define pic_icw1_interval4		0x04	; Call address interval 4(8)
%define pic_icw1_level			0x08	; Level triggered (dege) mode
%define pic_icw1_init			0x10	; Initialization - required

%define pic_icw4_8086			0x01	; 8086/88 (MSC-80/85) mode
%define pic_icw4_auto			0x02	; Auto (normal) EOI
%define pic_icw4_buf_slave		0x08	; Bufferd mode / slave
%define pic_icw4_buf_mastere 	0x0c	; Bufferd mode / master
%define pic_icw4_sfnm			0x10	; Special fully nested (not)

; PIC remap irq to interrupt number
; Use reg: AL, BX
%macro pic_remap 2
	; save mask
	in al, master_pic_data
	mov bl, al
	in al, slave_pic_data
	mov bh, al

	mov al, pic_icw1_init+pic_icw1_icw4
	out master_pic_cmd, al
	out slave_pic_cmd, al
	
	; map
	mov al, %1
	out master_pic_data, al
	mov al, %2
	out slave_pic_data, al

	mov al, 4
	out master_pic_data, al
	mov al, 2
	out slave_pic_data, al

	mov al, pic_icw4_8086
	out master_pic_data, al
	out slave_pic_data, al

	; restore mask
	mov al, bl
	out master_pic_data, al
	mov al, bh
	out slave_pic_data, al
%endmacro

; Disable PIC
; Used reg: AL
%macro pic_disable 0
	mov al,0xff
	out master_pic_data, al
	out slave_pic_data, al
%endmacro

; Mask irq, the number of irq is in AL
; Used Reg AX, CX
%macro pic_mask_irq 0
	mov ch, 1
	mov cl, al
	cmp cl, 7
	ja %%slave
	shl ch, cl
	in al, master_pic_data
	or al, ch
	out master_pic_data, al
	jmp %%end
%%slave:
	sub cl, 8
	shl ch, cl
	in al, slave_pic_data
	or al, ch
	out slave_pic_data, al
%%end:
%endmacro

; Unmask irq, the irq number is in AL
; Used Reg AX, CX
%macro pic_unmask_irq 0
	mov ch, 1
	mov cl, al
	cmp cl, 7
	ja %%slave
	shl ch, cl
	not ch
	in al, master_pic_data
	and al, ch
	out master_pic_data, al
	jmp %%end
%%slave:
	sub cl, 8
	shl ch, cl
	not ch
	in al, slave_pic_data
	and al, ch
	out slave_pic_data, al
%%end:
%endmacro

%define PIC_READ_IRR	0x0a	; OCW3 irq ready next CMD read 
%define PIC_READ_ISR	0x0b	; 0CW3 irq server next CMD read

; PIC read IRR (interrupt request register)
; post condition: BX := irr
; Use Reg: al
%macro pic_read_irr 0
	mov al, PIC_READ_IRR
	out master_pic_cmd, al
	out slave_pic_cmd, al
	in master_pic_cmd, al
	mov bl, al
	in slave_pic_cmd, al
	mov bh, al
%endmacro

; PIC read ISR (in-service register)
; post condition: BX := isr
; Use Reg: al
%macro pic_read_isr 0
	mov al, PIC_READ_ISR
	out master_pic_cmd, al
	out slave_pic_cmd, al
	in master_pic_cmd, al
	mov bl, al
	in slave_pic_cmd, al
	mov bh, al
%endmacro

%endif
